// Mocks generated by Mockito 5.4.2 from annotations
// in terralinkapp/test/mocks/dio/interceptors_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:math' as _i4;

import 'package:dio/src/dio_mixin.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLock_0 extends _i1.SmartFake implements _i2.Lock {
  _FakeLock_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIterator_1<E> extends _i1.SmartFake implements Iterator<E> {
  _FakeIterator_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptor_2 extends _i1.SmartFake implements _i2.Interceptor {
  _FakeInterceptor_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Interceptors].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterceptors extends _i1.Mock implements _i2.Interceptors {
  MockInterceptors() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  set length(int? _length) => super.noSuchMethod(
        Invocation.setter(
          #length,
          _length,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Lock get requestLock => (super.noSuchMethod(
        Invocation.getter(#requestLock),
        returnValue: _FakeLock_0(
          this,
          Invocation.getter(#requestLock),
        ),
      ) as _i2.Lock);

  @override
  _i2.Lock get responseLock => (super.noSuchMethod(
        Invocation.getter(#responseLock),
        returnValue: _FakeLock_0(
          this,
          Invocation.getter(#responseLock),
        ),
      ) as _i2.Lock);

  @override
  _i2.Lock get errorLock => (super.noSuchMethod(
        Invocation.getter(#errorLock),
        returnValue: _FakeLock_0(
          this,
          Invocation.getter(#errorLock),
        ),
      ) as _i2.Lock);

  @override
  Iterator<_i2.Interceptor> get iterator => (super.noSuchMethod(
        Invocation.getter(#iterator),
        returnValue: _FakeIterator_1<_i2.Interceptor>(
          this,
          Invocation.getter(#iterator),
        ),
      ) as Iterator<_i2.Interceptor>);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  _i2.Interceptor get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.getter(#first),
        ),
      ) as _i2.Interceptor);

  @override
  set first(_i2.Interceptor? value) => super.noSuchMethod(
        Invocation.setter(
          #first,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Interceptor get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.getter(#last),
        ),
      ) as _i2.Interceptor);

  @override
  set last(_i2.Interceptor? value) => super.noSuchMethod(
        Invocation.setter(
          #last,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Interceptor get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.getter(#single),
        ),
      ) as _i2.Interceptor);

  @override
  Iterable<_i2.Interceptor> get reversed => (super.noSuchMethod(
        Invocation.getter(#reversed),
        returnValue: <_i2.Interceptor>[],
      ) as Iterable<_i2.Interceptor>);

  @override
  _i2.Interceptor operator [](int? index) => (super.noSuchMethod(
        Invocation.method(
          #[],
          [index],
        ),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.method(
            #[],
            [index],
          ),
        ),
      ) as _i2.Interceptor);

  @override
  void operator []=(
    int? index,
    _i2.Interceptor? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #[]=,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Interceptor elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        ),
      ) as _i2.Interceptor);

  @override
  Iterable<_i2.Interceptor> followedBy(Iterable<_i2.Interceptor>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #followedBy,
          [other],
        ),
        returnValue: <_i2.Interceptor>[],
      ) as Iterable<_i2.Interceptor>);

  @override
  void forEach(void Function(_i2.Interceptor)? action) => super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool contains(Object? element) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool every(bool Function(_i2.Interceptor)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool any(bool Function(_i2.Interceptor)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.Interceptor firstWhere(
    bool Function(_i2.Interceptor)? test, {
    _i2.Interceptor Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i2.Interceptor);

  @override
  _i2.Interceptor lastWhere(
    bool Function(_i2.Interceptor)? test, {
    _i2.Interceptor Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i2.Interceptor);

  @override
  _i2.Interceptor singleWhere(
    bool Function(_i2.Interceptor)? test, {
    _i2.Interceptor Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i2.Interceptor);

  @override
  String join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: '',
      ) as String);

  @override
  Iterable<_i2.Interceptor> where(bool Function(_i2.Interceptor)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: <_i2.Interceptor>[],
      ) as Iterable<_i2.Interceptor>);

  @override
  Iterable<T> whereType<T>() => (super.noSuchMethod(
        Invocation.method(
          #whereType,
          [],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<T> map<T>(T Function(_i2.Interceptor)? f) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [f],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<T> expand<T>(Iterable<T> Function(_i2.Interceptor)? f) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [f],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  _i2.Interceptor reduce(
          _i2.Interceptor Function(
            _i2.Interceptor,
            _i2.Interceptor,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        ),
      ) as _i2.Interceptor);

  @override
  T fold<T>(
    T? initialValue,
    T Function(
      T,
      _i2.Interceptor,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i3.dummyValue<T>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
      ) as T);

  @override
  Iterable<_i2.Interceptor> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: <_i2.Interceptor>[],
      ) as Iterable<_i2.Interceptor>);

  @override
  Iterable<_i2.Interceptor> skipWhile(bool Function(_i2.Interceptor)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: <_i2.Interceptor>[],
      ) as Iterable<_i2.Interceptor>);

  @override
  Iterable<_i2.Interceptor> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: <_i2.Interceptor>[],
      ) as Iterable<_i2.Interceptor>);

  @override
  Iterable<_i2.Interceptor> takeWhile(bool Function(_i2.Interceptor)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: <_i2.Interceptor>[],
      ) as Iterable<_i2.Interceptor>);

  @override
  List<_i2.Interceptor> toList({bool? growable = true}) => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
          {#growable: growable},
        ),
        returnValue: <_i2.Interceptor>[],
      ) as List<_i2.Interceptor>);

  @override
  Set<_i2.Interceptor> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: <_i2.Interceptor>{},
      ) as Set<_i2.Interceptor>);

  @override
  void add(_i2.Interceptor? element) => super.noSuchMethod(
        Invocation.method(
          #add,
          [element],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addAll(Iterable<_i2.Interceptor>? iterable) => super.noSuchMethod(
        Invocation.method(
          #addAll,
          [iterable],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool remove(Object? element) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  void removeWhere(bool Function(_i2.Interceptor)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void retainWhere(bool Function(_i2.Interceptor)? test) => super.noSuchMethod(
        Invocation.method(
          #retainWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <R>[],
      ) as List<R>);

  @override
  _i2.Interceptor removeLast() => (super.noSuchMethod(
        Invocation.method(
          #removeLast,
          [],
        ),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.method(
            #removeLast,
            [],
          ),
        ),
      ) as _i2.Interceptor);

  @override
  void sort(
          [int Function(
            _i2.Interceptor,
            _i2.Interceptor,
          )? compare]) =>
      super.noSuchMethod(
        Invocation.method(
          #sort,
          [compare],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void shuffle([_i4.Random? random]) => super.noSuchMethod(
        Invocation.method(
          #shuffle,
          [random],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<int, _i2.Interceptor> asMap() => (super.noSuchMethod(
        Invocation.method(
          #asMap,
          [],
        ),
        returnValue: <int, _i2.Interceptor>{},
      ) as Map<int, _i2.Interceptor>);

  @override
  List<_i2.Interceptor> operator +(List<_i2.Interceptor>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #+,
          [other],
        ),
        returnValue: <_i2.Interceptor>[],
      ) as List<_i2.Interceptor>);

  @override
  List<_i2.Interceptor> sublist(
    int? start, [
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #sublist,
          [
            start,
            end,
          ],
        ),
        returnValue: <_i2.Interceptor>[],
      ) as List<_i2.Interceptor>);

  @override
  Iterable<_i2.Interceptor> getRange(
    int? start,
    int? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRange,
          [
            start,
            end,
          ],
        ),
        returnValue: <_i2.Interceptor>[],
      ) as Iterable<_i2.Interceptor>);

  @override
  void removeRange(
    int? start,
    int? end,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeRange,
          [
            start,
            end,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fillRange(
    int? start,
    int? end, [
    _i2.Interceptor? fill,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #fillRange,
          [
            start,
            end,
            fill,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRange(
    int? start,
    int? end,
    Iterable<_i2.Interceptor>? iterable, [
    int? skipCount = 0,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #setRange,
          [
            start,
            end,
            iterable,
            skipCount,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceRange(
    int? start,
    int? end,
    Iterable<_i2.Interceptor>? newContents,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceRange,
          [
            start,
            end,
            newContents,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int indexOf(
    Object? element, [
    int? start = 0,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #indexOf,
          [
            element,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int indexWhere(
    bool Function(_i2.Interceptor)? test, [
    int? start = 0,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #indexWhere,
          [
            test,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int lastIndexOf(
    Object? element, [
    int? start,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastIndexOf,
          [
            element,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int lastIndexWhere(
    bool Function(_i2.Interceptor)? test, [
    int? start,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastIndexWhere,
          [
            test,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  void insert(
    int? index,
    _i2.Interceptor? element,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            index,
            element,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Interceptor removeAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #removeAt,
          [index],
        ),
        returnValue: _FakeInterceptor_2(
          this,
          Invocation.method(
            #removeAt,
            [index],
          ),
        ),
      ) as _i2.Interceptor);

  @override
  void insertAll(
    int? index,
    Iterable<_i2.Interceptor>? iterable,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [
            index,
            iterable,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAll(
    int? index,
    Iterable<_i2.Interceptor>? iterable,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setAll,
          [
            index,
            iterable,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
