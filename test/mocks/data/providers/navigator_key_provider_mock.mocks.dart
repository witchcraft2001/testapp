// Mocks generated by Mockito 5.4.2 from annotations
// in terralinkapp/test/mocks/data/providers/navigator_key_provider_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;
import 'package:terralinkapp/data/providers/navigator_key_provider.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigatorKeyProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorKeyProvider extends _i2.Mock
    implements _i3.NavigatorKeyProvider {
  MockNavigatorKeyProvider() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.NavigatorState> get rootNavigatorKey => (super.noSuchMethod(
        Invocation.getter(#rootNavigatorKey),
        returnValue: _FakeGlobalKey_0<_i1.NavigatorState>(
          this,
          Invocation.getter(#rootNavigatorKey),
        ),
      ) as _i1.GlobalKey<_i1.NavigatorState>);
  @override
  _i1.GlobalKey<_i1.NavigatorState> get shellNavigatorKey =>
      (super.noSuchMethod(
        Invocation.getter(#shellNavigatorKey),
        returnValue: _FakeGlobalKey_0<_i1.NavigatorState>(
          this,
          Invocation.getter(#shellNavigatorKey),
        ),
      ) as _i1.GlobalKey<_i1.NavigatorState>);
}
