// Mocks generated by Mockito 5.4.2 from annotations
// in terralinkapp/test/mocks/data/services/log_service_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:terralinkapp/core/services/log_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogService extends _i1.Mock implements _i2.LogService {
  MockLogService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> init(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #init,
          [enabled],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<void> recordError(
    dynamic exception,
    StackTrace? stack, {
    dynamic reason,
    Iterable<Object>? information = const [],
    bool? printDetails,
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            exception,
            stack,
          ],
          {
            #reason: reason,
            #information: information,
            #printDetails: printDetails,
            #fatal: fatal,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> log(String? message) => (super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
